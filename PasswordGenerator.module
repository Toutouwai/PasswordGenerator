<?php namespace ProcessWire;

/**
 *
 * Password Generator
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PasswordGenerator extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Password Generator',
			'version' => '0.1.6',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/PasswordGenerator',
			'summary' => 'Adds a password generator to InputfieldPassword.',
			'icon' => 'cogs',
			'autoload' => "template=admin",
			'requires' => 'ProcessWire>=3.0.0, PHP>=5.4.0',
		);
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookAfter('InputfieldPassword::render', $this, 'addGenerator');
	}

	/**
	 * Add generator to InputfieldPassword
	 */
	public function addGenerator(HookEvent $event) {
		$inputfield = $event->object;
		$out = $event->return;

		// Get requirements of this password field
		$requirements = array(
			'lower' => 'false',
			'upper' => 'false',
			'digit' => 'false',
			'other' => 'false',
		);
		foreach($inputfield->requirements as $requirement) {
			if($requirement === 'letter') {
				$requirements['lower'] = 'true';
			} else {
				$requirements[$requirement] = 'true';
			}
		}
		// Set a sensible default length if the password field settings have not been saved
		$length = $inputfield->minlength ?: 10;

		// Override settings
		$override_requirements = $this->requirements ?: [];
		foreach($override_requirements as $requirement) $requirements[$requirement] = 'true';
		if($this->length) $length = $this->length;

		// Add JS and CSS
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];
		$config = $this->config;
		$config->scripts->add($config->urls->$this . "pGenerator.jquery.js?v=$version");
		$config->styles->add($config->urls->$this . "{$this}.css?v={$version}");

		// Add password display div and initialise pGenerator
		$button_text = $this->_('Generate password');
		$name = $inputfield->name;
		$out .= "
<div class='password-display' id='pd-{$name}'>&nbsp;</div>
<a href='#' class='generate-password' id='gp-{$name}'>$button_text</a>
<script>
$(function() {
	var passwordElement{$name} = $('.Inputfield_{$name} input[type=password]:not(.InputfieldPasswordOld)');
	$('#gp-{$name}').pGenerator({
		'bind': 'click',
		'passwordElement': passwordElement{$name},
		'displayElement': '#pd-{$name}',
		'passwordLength': $length,
		'uppercase': {$requirements['upper']},
		'lowercase': {$requirements['lower']},
		'numbers': {$requirements['digit']},
		'specialChars': {$requirements['other']},
		'onPasswordGenerated': function() {
			passwordElement{$name}.focus().blur();
		}
	});
});
</script>
		";
		$event->return = $out;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire('modules');

		/* @var InputfieldFieldset $fs */
		$fs = $modules->InputfieldFieldset;
		$fs->label = $this->_('Password generator settings: overrides');
		$fs->description = $this->_('Any values you set here will override the requirements set for the password inputfield. Useful if you want the generator to create stronger passwords than the inputfield requires.');
		$inputfields->add($fs);

		/* @var InputfieldCheckboxes $f */
		$f = $modules->InputfieldCheckboxes;
		$f_name = 'requirements';
		$f->name = $f_name;
		$f->label = $this->_('Password requirements');
		$f->addOption('lower', $this->_('lowercase letter'));
		$f->addOption('upper', $this->_('uppercase letter'));
		$f->addOption('digit', $this->_('digit'));
		$f->addOption('other', $this->_('symbol/punctuation'));
		$f->value = $this->$f_name;
		$f->columnWidth = 50;
		$fs->add($f);

		/* @var InputfieldInteger $f */
		$f = $modules->InputfieldInteger;
		$f_name = 'length';
		$f->name = $f_name;
		$f->label = $this->_('Password length');
		$f->inputType = 'number';
		$f->value = $this->$f_name;
		$f->columnWidth = 50;
		$fs->add($f);

	}

}
